/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

#define PLUGIN_VERSION "1.2b_debug"   
#define INFECTEDTEAM 3

public Plugin:myinfo = 
{
	name = "L4D1-2 Randomize Tank and Witch Settings",
	author = "Thraka - Idea From gamemann, edited by TastyCheese",
	description = "Configures the tank and witch with random speed and health settings, plus burn duration for the tank",
	version = PLUGIN_VERSION,
	url = "http://forums.alliedmods.net/showthread.php?p=1076665"
}

new Handle:cvar_witch_health = INVALID_HANDLE;
new Handle:cvar_witch_speed = INVALID_HANDLE;
new Handle:cvar_tank_health = INVALID_HANDLE;
new Handle:cvar_tank_speed = INVALID_HANDLE;

new Handle:cvar_setting_tank_hp_min = INVALID_HANDLE;
new Handle:cvar_setting_tank_hp_max = INVALID_HANDLE;
new Handle:cvar_setting_witch_hp_min = INVALID_HANDLE;
new Handle:cvar_setting_witch_hp_max = INVALID_HANDLE;

new Handle:cvar_setting_tank_speed_min = INVALID_HANDLE;
new Handle:cvar_setting_tank_speed_max = INVALID_HANDLE;
new Handle:cvar_setting_witch_speed_min = INVALID_HANDLE;
new Handle:cvar_setting_witch_speed_max = INVALID_HANDLE;

new Handle:cvar_notify = INVALID_HANDLE;

new _tankOriginalHp = 0;
new _tankOriginalSpeed = 0;
new _witchOriginalHp = 0;
new _witchOriginalSpeed = 0;
new _tankBotCount = 0;

// Note: The tank speed (witch prob too) can be altered with SetEntPropFloat(client, Prop_Send, "m_flLaggedMovementValue", value);

public OnPluginStart()
{
	// Require Left 4 Dead 1 or 2
	decl String:game_name[64];
	GetGameFolderName(game_name, sizeof(game_name));
	if (!StrEqual(game_name, "left4dead2", false) && !StrEqual(game_name, "left4dead", false))
	{		
		SetFailState("Plugin supports Left 4 Dead 1 or 2 only.");
	}
	
	CreateConVar("l4d_randomize_tankwitch_ver", PLUGIN_VERSION, "Version of the randomize tank and witch settings plugin.", FCVAR_PLUGIN|FCVAR_SPONLY|FCVAR_NOTIFY);
	
	// ============================================================
	// == Get the cvars for the tank and witch
	cvar_tank_health = FindConVar("z_tank_health");
	cvar_tank_speed = FindConVar("z_tank_speed_vs");
	cvar_witch_health = FindConVar("z_witch_health");
	cvar_witch_speed = FindConVar("z_witch_speed");
	
	_tankOriginalHp = GetConVarInt(cvar_tank_health);
	_tankOriginalSpeed = GetConVarInt(cvar_tank_speed);
	_witchOriginalHp = GetConVarInt(cvar_witch_health);
	_witchOriginalSpeed = GetConVarInt(cvar_witch_speed);
	
	
	// ============================================================
	// == Create cvars for the plugin
	cvar_setting_tank_hp_min = CreateConVar("l4d_tank_hp_min", SafeIntToString(_tankOriginalHp), "Tank's minimum health when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_tank_hp_max = CreateConVar("l4d_tank_hp_max", SafeIntToString(_tankOriginalHp), "Tank's maximum health when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_tank_speed_min = CreateConVar("l4d_tank_speed_min", SafeIntToString(_tankOriginalSpeed), "Tank's minimum speed when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_tank_speed_max = CreateConVar("l4d_tank_speed_max", SafeIntToString(_tankOriginalSpeed), "Tank's maximum speed when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	
	cvar_setting_witch_hp_min = CreateConVar("l4d_witch_hp_min", SafeIntToString(_witchOriginalHp), "Witch's minimum health when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_witch_hp_max = CreateConVar("l4d_witch_hp_max", SafeIntToString(_witchOriginalHp), "Witch's maximum health when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_witch_speed_min = CreateConVar("l4d_witch_speed_min", SafeIntToString(_witchOriginalSpeed), "Witch's minimum speed when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	cvar_setting_witch_speed_max = CreateConVar("l4d_witch_speed_max", SafeIntToString(_witchOriginalSpeed), "Witch's maximum speed when randomizing", FCVAR_PLUGIN|FCVAR_NOTIFY);
	
	cvar_notify = CreateConVar("l4d_randomize_tankwitch_notify", "1", "Notify the infected players of the tank and witch settings.", FCVAR_PLUGIN|FCVAR_NOTIFY);
	
	AutoExecConfig(true, "l4d_randomize_tw")
	
	// ============================================================
	// == Hook events
	HookEvent("round_start", Event_RoundStart);
	HookEvent("tank_spawn", Event_TankSpawn);
	HookEvent("witch_spawn", Event_WitchSpawn);
	HookEvent("tank_killed", Event_TankKilled);
	
	// ============================================================
	// == Console Commands
	RegConsoleCmd("l4d_randomize_tankwitch_print", Command_PrintSettings);
	RegAdminCmd("sm_force_tank", Command_DebugSpawnTank, ADMFLAG_ROOT);
	RegConsoleCmd("l4d_rtw_debug_witch", Command_DebugSpawnWitch);
}

public OnPluginEnd()
{
	SetConVarInt(cvar_tank_health, _tankOriginalHp);
	SetConVarInt(cvar_tank_speed, _tankOriginalSpeed);
	SetConVarInt(cvar_witch_health, _witchOriginalHp);
	SetConVarInt(cvar_witch_speed, _witchOriginalSpeed);
}

// Gets a client ID to allow various commands to be called as console
stock Misc_GetAnyClient() {
	for (new i = 1; i <= MaxClients; i++)
	{
		if (IsClientInGame(i))
		{
			// PrintToChatAll("Using client %L for command", i);
			return i;
		}
	}
	return 0;
}

stock CheatCommand(client, String:command[], String:arguments[]="")
{
	new userflags = GetUserFlagBits(client);
	SetUserFlagBits(client, ADMFLAG_ROOT);
	new flags = GetCommandFlags(command);
	SetCommandFlags(command, flags & ~FCVAR_CHEAT);
	FakeClientCommand(client, "%s %s", command, arguments);
	SetCommandFlags(command, flags);
	SetUserFlagBits(client, userflags);
}


public Action:Command_DebugSpawnTank(client, args)
{
	CheatCommand(Misc_GetAnyClient(), "z_spawn_old tank", "auto");
	return Plugin_Handled;
}


public Action:Command_DebugSpawnWitch(client, args)
{
	new flags = GetCommandFlags("z_spawn");
    
	
	SetCommandFlags("z_spawn", flags & ~FCVAR_CHEAT);
	
	if (args == 1)
	{
		new String:arg[128]
		GetCmdArg(1, arg, sizeof(arg))
		FakeClientCommand(client, "z_spawn witch %s", arg);
		
	}
	else
		FakeClientCommand(client, "z_spawn witch");
	
	SetCommandFlags("z_spawn", flags);
}

public Action:Command_PrintSettings(client, args)
{
	PrintToConsole(client, "Tank HP Min: %i", GetConVarInt(cvar_setting_tank_hp_min));
	PrintToConsole(client, "Tank HP Max: %i", GetConVarInt(cvar_setting_tank_hp_max));
	PrintToConsole(client, "Tank Speed Min: %i", GetConVarInt(cvar_setting_tank_speed_min));
	PrintToConsole(client, "Tank Speed Max: %i", GetConVarInt(cvar_setting_tank_speed_max));
	
	PrintToConsole(client, "Witch HP Min: %i", GetConVarInt(cvar_setting_witch_hp_min));
	PrintToConsole(client, "Witch HP Max: %i", GetConVarInt(cvar_setting_witch_hp_max));
	PrintToConsole(client, "Witch Speed Min: %i", GetConVarInt(cvar_setting_witch_speed_min));
	PrintToConsole(client, "Witch Speed Max: %i", GetConVarInt(cvar_setting_witch_speed_max));
}
// ============================================================================================
// == Events
// ============================================================================================
public Event_TankKilled(Handle:event, const String:name[], bool:dontBroadcast)
{
	new tankClient = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if (IsFakeClient(tankClient))
		_tankBotCount--;
	
	if (_tankBotCount < 0)
		_tankBotCount = 0;
}


public Event_WitchSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	if (GetConVarBool(cvar_notify) == true)
	{
		for (new i = 1; i <= MaxClients; i++)
		{
			if (!IsClientInGame(i))
				continue;
			
			if (GetClientTeam(i) == INFECTEDTEAM)
				PrintToChat(i, "\x03Witch \x01has appeared with \x04%i \x01HP and \x04%i \x01speed.", GetConVarInt(cvar_witch_health), GetConVarInt(cvar_witch_speed));
		} 
	}
	
	// Randomize the next tank (if one)
	LogMessage("Witch spawned with HP: %i Speed: %i", GetConVarInt(cvar_witch_health), GetConVarInt(cvar_witch_speed));
	RandomizeWitch();
}

public Event_TankSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	// Determine if we're a bot or not
	new tankUserId = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if (IsFakeClient(tankUserId))
	{
		_tankBotCount++;
		CreateTimer(0.5,RandomizeTankTimer, INVALID_HANDLE);
		return;
	}
	else
	{
		if (_tankBotCount > 0)
			_tankBotCount--;
	}
	
	RunTankLogic();
}

public Action:RandomizeTankTimer(Handle:timer)
{
	if (_tankBotCount > 0)
	{
		RunTankLogic();
	}
}

public Event_RoundStart(Handle:event, const String:name[], bool:dontBroadcast)
{
	LogMessage("Round Start Triggered");
	
	RandomizeTank();
	RandomizeWitch();
}

RunTankLogic()
{
	if (GetConVarBool(cvar_notify) == true)
	{
		for (new i = 1; i <= MaxClients; i++)
		{
			if (!IsClientInGame(i) || IsFakeClient(i))
				continue;
			
			if (GetClientTeam(i) == INFECTEDTEAM)
			{
				//new tankHP = RoundToFloor(float(GetConVarInt(cvar_tank_health)) * 1.5);
				//PrintToChat(i, "\x03Tank \x01has appeared with \x04%i \x01HP and \x04%i \x01speed and \x04%i.", tankHP, GetConVarInt(cvar_tank_speed));
				//PrintToChat(i, "\x03Tank \x01has appeared with \x04%i \x01HP and \x04%i \x01speed and \x04%i.", GetConVarInt(cvar_tank_health), GetConVarInt(cvar_tank_speed));
			}
		}
	}
	
	// Randomize the next tank (if one)
	LogMessage("Tank spawned with HP: %i Speed: %i", GetConVarInt(cvar_tank_health), GetConVarInt(cvar_tank_speed));
	RandomizeTank();
}

RandomizeTank()
{
	new tank_hp[2];
	new tank_speed[2];
	new tank_burn[2];
	new multiper = 1000 * GetInGamePlayerCount();

	
	tank_hp[0] = GetConVarInt(cvar_setting_tank_hp_min) + multiper;
	tank_hp[1] = GetConVarInt(cvar_setting_tank_hp_max) + multiper;
	tank_speed[0] = GetConVarInt(cvar_setting_tank_speed_min);
	tank_speed[1] = GetConVarInt(cvar_setting_tank_speed_max);
	
	if (tank_hp[0] > tank_hp[1])
	{
		LogError("Randomize Tank HP has min (%i) greater than max (%i)", tank_hp[0], tank_hp[1]);
	}
	else if (tank_speed[0] > tank_speed[1])
	{
		LogError("Randomize Tank Speed has min (%i) greater than max (%i)", tank_speed[0], tank_speed[1]);
	}
	else if (tank_burn[0] > tank_burn[1])
	{
		LogError("Randomize Tank Burn Duration has min (%i) greater than max (%i)", tank_burn[0], tank_burn[1]);
	}
	else
	{
		//LogMessage("Randomize Tank Start HP: %i-%i Speed: %i-%i Burn Duration: %i-%i", tank_hp[0], tank_hp[1], tank_speed[0], tank_speed[1], tank_burn[0], tank_burn[1]);
		//LogMessage("Randomize Tank Current HP: %i Speed: %i", GetConVarInt(cvar_tank_health), GetConVarInt(cvar_tank_speed));
		
		
		// Remove notify
		SetConVarFlags(cvar_tank_health, GetConVarFlags(cvar_tank_health) & ~FCVAR_NOTIFY);
		SetConVarFlags(cvar_tank_speed, GetConVarFlags(cvar_tank_speed) & ~FCVAR_NOTIFY);
		
		// Set con var
		SetConVarInt(cvar_tank_health, GetRandomInt(tank_hp[0], tank_hp[1]));
		SetConVarInt(cvar_tank_speed, GetRandomInt(tank_speed[0], tank_speed[1]));
		
		// Restore notify
		SetConVarFlags(cvar_tank_health, GetConVarFlags(cvar_tank_health) | FCVAR_NOTIFY);
		SetConVarFlags(cvar_tank_speed, GetConVarFlags(cvar_tank_speed) | FCVAR_NOTIFY);
		
		LogMessage("Randomize Tank New HP: %i Speed: %i", GetConVarInt(cvar_tank_health), GetConVarInt(cvar_tank_speed));
	
	}
}

stock GetInGamePlayerCount()
{
	new count = 0;

	for (new i = 1; i <= MaxClients; i++)
	{
		if (IsClientInGame(i) && (GetClientTeam(i) == 2) && !IsFakeClient(i))
			count++;
	}
	return count;
}

RandomizeWitch()
{
	new witch_hp[2];
	new witch_speed[2];
	
	witch_hp[0] = GetConVarInt(cvar_setting_witch_hp_min);
	witch_hp[1] = GetConVarInt(cvar_setting_witch_hp_max);
	witch_speed[0] = GetConVarInt(cvar_setting_witch_speed_min);
	witch_speed[1] = GetConVarInt(cvar_setting_witch_speed_max);
	
	if (witch_hp[0] > witch_hp[1])
	{
		LogError("Randomize Witch HP has min (%i) greater than max (%i)", witch_hp[0], witch_hp[1]);
	}
	else if (witch_speed[0] > witch_speed[1])
	{
		LogError("Randomize Witch Speed has min (%i) greater than max (%i)", witch_speed[0], witch_speed[1]);
	}
	else
	{
		LogMessage("Randomize Witch Start HP: %i-%i Speed: %i-%i", witch_hp[0], witch_hp[1], witch_speed[0], witch_speed[1]);
		LogMessage("Randomize Witch Current HP: %i Speed: %i", GetConVarInt(cvar_witch_health), GetConVarInt(cvar_witch_speed));
		
		
		// Remove notify
		SetConVarFlags(cvar_witch_health, GetConVarFlags(cvar_witch_health) & ~FCVAR_NOTIFY);
		SetConVarFlags(cvar_witch_speed, GetConVarFlags(cvar_witch_speed) & ~FCVAR_NOTIFY);
		
		// Set con var
		SetConVarInt(cvar_witch_health, GetRandomInt(witch_hp[0], witch_hp[1]));
		SetConVarInt(cvar_witch_speed, GetRandomInt(witch_speed[0], witch_speed[1]));
		
		// Restore notify
		SetConVarFlags(cvar_witch_health, GetConVarFlags(cvar_witch_health) | FCVAR_NOTIFY);
		SetConVarFlags(cvar_witch_speed, GetConVarFlags(cvar_witch_speed) | FCVAR_NOTIFY);
		
		LogMessage("Randomize Witch New HP: %i Speed: %i", GetConVarInt(cvar_witch_health), GetConVarInt(cvar_witch_speed));
	}
}

String:SafeIntToString(value)
{
	decl String:buffer[128] 
	IntToString(value, buffer, sizeof(buffer));
	return buffer;
}
